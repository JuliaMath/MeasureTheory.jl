# Beta distribution

export Beta

@parameterized Beta(Œ±,Œ≤)

@kwstruct Beta(Œ±, Œ≤)

@kwalias Beta [
    a     => Œ±
    alpha => Œ±
    b     => Œ≤
    beta  => Œ≤
]

TV.as(::Beta) = asùïÄ

function logdensity(d::Beta{(:Œ±, :Œ≤), Tuple{A,B}}, x::X) where {A,B,X}
    if static_hasmethod(xlogy, Tuple{A,X}) && static_hasmethod(xlog1py, Tuple{B,X})
        return xlogy(d.Œ± - 1, x) + xlog1py(d.Œ≤ - 1, -x) 
    else
        return (d.Œ± - 1) * log(x) + (d.Œ≤ - 1) * log1p(-x)
    end
end

function basemeasure(d::Beta{(:Œ±,:Œ≤)})
    inbounds(x) = 0 < x < 1
    const‚Ñì = 0.0
    var‚Ñì() = - logbeta(d.Œ±, d.Œ≤)
    base = Lebesgue(‚Ñù)
    FactoredBase(inbounds, const‚Ñì, var‚Ñì, base)
end

Base.rand(rng::AbstractRNG, T::Type, Œº::Beta) = rand(rng, Dists.Beta(Œº.Œ±, Œº.Œ≤))

distproxy(d::Beta{(:Œ±, :Œ≤)}) = Dists.Beta(d.Œ±, d.Œ≤)

asparams(::Type{<:Beta}, ::Val{:Œ±}) = as‚Ñù‚Çä
asparams(::Type{<:Beta}, ::Val{:Œ≤}) = as‚Ñù‚Çä
