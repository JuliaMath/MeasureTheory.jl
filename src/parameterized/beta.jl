# Beta distribution

export Beta

@parameterized Beta(Œ±, Œ≤)

@kwstruct Beta(Œ±, Œ≤)

@kwalias Beta [
    a => Œ±
    alpha => Œ±
    b => Œ≤
    beta => Œ≤
]

xform(::Beta) = asùïÄ

@inline function logdensity_def(d::Beta{(:Œ±, :Œ≤),Tuple{A,B}}, x::X) where {A,B,X}
    return xlogy(d.Œ± - 1, x) + xlog1py(d.Œ≤ - 1, -x)
end

@inline function basemeasure(d::Beta{(:Œ±, :Œ≤)})
    const‚Ñì = 0.0
    var‚Ñì = Returns(-logbeta(d.Œ±, d.Œ≤))
    base = Lebesgue(‚Ñù)
    FactoredBase(const‚Ñì, var‚Ñì, base)
end

Base.rand(rng::AbstractRNG, T::Type, Œº::Beta) = rand(rng, Dists.Beta(Œº.Œ±, Œº.Œ≤))

distproxy(d::Beta{(:Œ±, :Œ≤)}) = Dists.Beta(d.Œ±, d.Œ≤)

asparams(::Type{<:Beta}, ::StaticSymbol{:Œ±}) = as‚Ñù‚Çä
asparams(::Type{<:Beta}, ::StaticSymbol{:Œ≤}) = as‚Ñù‚Çä

insupport(::Beta, x) = inùïÄ(x)
insupport(::Beta) = inùïÄ
